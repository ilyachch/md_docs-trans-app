name: Release
on:
  push:
    branches:
      - master
    paths:
      - '**/*.py'
      - 'pyproject.toml'
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Dry run'
        required: false
        default: false
        type: boolean
jobs:
  lint:
    uses: ./.github/workflows/linting.yml
    name: Linting
    with:
      system: "ubuntu-22.04"
      python-version: "3.10"
  test:
    uses: ./.github/workflows/testing.yml
    name: Testing
    strategy:
      fail-fast: false
      matrix:
        system: [ "ubuntu-20.04", "ubuntu-22.04" ]
        python-version: [ "3.10", "3.11" ]
    with:
      system: ${{ matrix.system }}
      python-version: ${{ matrix.python-version }}
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: write
    steps:
      - name: Getting code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Getting Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Initiate Release
        run: |
          echo release_name=$(poetry version) >> $GITHUB_ENV
          echo release_tag=$(poetry version -s) >> $GITHUB_ENV
          if [[ $(poetry version -s) = $(git describe --tags --abbrev=0) ]]; then
            echo should_be_released=0 >> $GITHUB_ENV
          else
            echo should_be_released=1 >> $GITHUB_ENV
          fi

      - name: Build package
        if: ${{ env.should_be_released == 1 }}
        run: poetry build

      - name: Upload Release assets to workflow artifacts
        if: ${{ inputs.dry-run && env.should_be_released == 1 }}
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Publish to PyPI (dry-run)
        if: ${{ inputs.dry-run && env.should_be_released == 1 }}
        run: poetry publish --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_TOKEN }} --dry-run

      - name: Create Release
        if: ${{ !inputs.dry-run && env.should_be_released == 1 }}
        id: create_release
        uses: ncipollo/release-action@v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          artifacts: "dist/*"
          commit: ${{ github.sha }}
          draft: false
          name: ${{ env.release_name }}
          tag: ${{ env.release_tag }}
      - name: Publish to PyPI
        if: ${{ !inputs.dry-run && env.should_be_released == 1 }}
        run: poetry publish --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_TOKEN }}
